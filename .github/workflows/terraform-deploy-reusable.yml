name: Terraform Deploy - Reusable Workflow

on:
  workflow_call:
    inputs:
      terraform-version:
        description: 'Terraform version to use'
        required: false
        type: string
        default: '1.5.0'
      aws-region:
        description: 'AWS region to deploy to'
        required: true
        type: string
      working-directory:
        description: 'Working directory where Terraform files are located'
        required: true
        type: string
      tfvars-file:
        description: 'Path to the Terraform variables file (relative to working directory)'
        required: true
        type: string
      environment:
        description: 'Environment name (dev, staging, prod)'
        required: true
        type: string
      enable-servicenow:
        description: 'Enable ServiceNow DevOps integration'
        required: false
        type: boolean
        default: false
      servicenow-change-model:
        description: 'ServiceNow change model name'
        required: false
        type: string
        default: 'DevOps'
      servicenow-deployment-gate:
        description: 'ServiceNow deployment gate configuration (JSON string)'
        required: false
        type: string
        default: ''
      artifact-retention-days:
        description: 'Number of days to retain Terraform plan artifacts'
        required: false
        type: number
        default: 7
      run-apply:
        description: 'Whether to run terraform apply after plan'
        required: false
        type: boolean
        default: true
    secrets:
      aws-access-key-id:
        description: 'AWS Access Key ID'
        required: true
      aws-secret-access-key:
        description: 'AWS Secret Access Key'
        required: true
      aws-role-to-assume:
        description: 'AWS IAM role to assume (optional)'
        required: false
      sn-devops-integration-token:
        description: 'ServiceNow DevOps integration token'
        required: false
      sn-instance-url:
        description: 'ServiceNow instance URL'
        required: false
      sn-orchestration-tool-id:
        description: 'ServiceNow orchestration tool ID'
        required: false

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          role-to-assume: ${{ secrets.aws-role-to-assume }}
          aws-region: ${{ inputs.aws-region }}
          role-session-name: GitHubActions-Terraform-Plan

      - name: Terraform Init
        working-directory: ${{ inputs.working-directory }}
        run: terraform init

      - name: Terraform Format Check
        working-directory: ${{ inputs.working-directory }}
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ${{ inputs.working-directory }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ${{ inputs.working-directory }}
        run: |
          terraform plan -var-file="${{ inputs.tfvars-file }}" -out=tfplan
          {
            echo 'plan<<EOF'
            terraform show -no-color tfplan
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ inputs.working-directory }}/tfplan
          retention-days: ${{ inputs.artifact-retention-days }}

      - name: Comment PR with Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const plan = `${{ steps.plan.outputs.plan }}`;

            const output = `#### Terraform Plan

            <details><summary>Show Plan</summary>
      
            \`\`\`terraform
            ${plan}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`*`;
      
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: ServiceNow DevOps Change Automation
        uses: ServiceNow/servicenow-devops-change@v6.1.0
        if: inputs.enable-servicenow && github.ref == 'refs/heads/main'
        id: create
        with:
          devops-integration-token: ${{ secrets.sn-devops-integration-token }}
          instance-url: ${{ secrets.sn-instance-url }}
          tool-id: ${{ secrets.sn-orchestration-tool-id }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Terraform Plan'
          change-request: |
            {
              "setCloseCode": true,
              "autoCloseChange": true,
              "attributes": {
                "chg_model": {"name": "${{ inputs.servicenow-change-model }}"},
                "short_description": "Automated Software Deployment",
                "description": "Automated Software Deployment.",
                "implementation_plan": "Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.",
                "backout_plan": "When software fails in production, the previous software release will be re-deployed.",
                "test_plan": "Testing if the software was successfully deployed"
              }
            }
          interval: '60'
          timeout: '180'
          changeCreationTimeOut: '180'
          abortOnChangeCreationFailure: true
          abortOnChangeStepTimeout: false
          deployment-gate: ${{ inputs.servicenow-deployment-gate }}

      - name: ServiceNow DevOps Register Package
        uses: ServiceNow/servicenow-devops-register-package@v3.1.0
        if: inputs.enable-servicenow && github.ref == 'refs/heads/main'
        with:
          devops-integration-token: ${{ secrets.sn-devops-integration-token }}
          instance-url: ${{ secrets.sn-instance-url }}
          tool-id: ${{ secrets.sn-orchestration-tool-id }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Terraform Plan'
          artifacts: |
            [
              {
                "name": "tfplan",
                "version": "1.${{ github.run_number }}",
                "semanticVersion": "1.${{ github.run_number }}.0",
                "repositoryName": "${{ github.repository }}"
              }
            ]
          package-name: 'tfplan'

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: inputs.run-apply && github.ref == 'refs/heads/main'
    environment:
      name: ${{ inputs.environment }}
      url: https://console.aws.amazon.com/lambda
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          role-to-assume: ${{ secrets.aws-role-to-assume }}
          aws-region: ${{ inputs.aws-region }}
          role-session-name: GitHubActions-Terraform-Apply

      - name: Terraform Init
        working-directory: ${{ inputs.working-directory }}
        run: terraform init

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ${{ inputs.working-directory }}

      - name: Terraform Apply
        id: apply
        working-directory: ${{ inputs.working-directory }}
        run: terraform apply -auto-approve tfplan

  change-request-info:
    name: Change Request Info
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: always() && inputs.enable-servicenow && github.ref == 'refs/heads/main'
    steps:
      - name: ServiceNow DevOps Get Change
        uses: ServiceNow/servicenow-devops-get-change@v3.1.0
        id: get
        with:
          devops-integration-token: ${{ secrets.sn-devops-integration-token }}
          instance-url: ${{ secrets.sn-instance-url }}
          tool-id: ${{ secrets.sn-orchestration-tool-id }}
          context-github: ${{ toJSON(github) }}
          change-details: |
            {
              "build_number":"${{ github.run_id }}",
              "pipeline_name":"${{ github.repository }}/${{ github.workflow }}",
              "stage_name":"Terraform Apply",
              "attempt_number":"${{ github.run_attempt }}"
            }

      - name: ServiceNow DevOps Change Request Info
        run: |
          echo "::notice::Change Request Number: ${{ steps.get.outputs.change-request-number }}"
